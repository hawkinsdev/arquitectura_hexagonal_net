# MyApp Architecture Template
Este repositorio proporciona una plantilla bÃ¡sica para un proyecto ASP.NET Core utilizando una arquitectura hexagonal. 
Incluye la configuraciÃ³n inicial para servicios, repositorios, autenticaciÃ³n, autorizaciÃ³n y Swagger para documentaciÃ³n de API.

## Estructura del Proyecto
La estructura del proyecto estÃ¡ organizada en capas para promover la separaciÃ³n de preocupaciones y la escalabilidad:

```plaintext
MyApp
â”‚
â”œâ”€â”€ MyApp.Api                  // Capa de presentaciÃ³n (Web API)
â”‚   â”œâ”€â”€ Controllers
â”‚   â”œâ”€â”€ Middleware
â”‚   â”œâ”€â”€ Program.cs
â”‚   â””â”€â”€ appsettings.json
â”‚
â”œâ”€â”€ MyApp.Application           // Capa de lÃ³gica de negocio
â”‚   â”œâ”€â”€ Services                // Servicios de aplicaciÃ³n
â”‚   â”œâ”€â”€ DTOs                   // Data Transfer Objects
â”‚   â”œâ”€â”€ Interfaces              // Interfaces de servicios
â”‚   â”œâ”€â”€ Validators              // Validadores de datos
â”‚   â””â”€â”€ Extensions              // MÃ©todos de extensiÃ³n
â”‚       â””â”€â”€ ServiceRegistration.cs // AquÃ­ se registran los servicios
â”‚
â”œâ”€â”€ MyApp.Domain                // Capa de dominio
â”‚   â”œâ”€â”€ Entities                // Entidades del dominio
â”‚   â”œâ”€â”€ ValueObjects            // Objetos de valor
â”‚   â””â”€â”€ Repositories            // Interfaces de repositorio
â”‚
â”œâ”€â”€ MyApp.Infrastructure         // Capa de infraestructura
â”‚   â”œâ”€â”€ Data                    // Contexto de base de datos y migraciones
â”‚   â”œâ”€â”€ Repositories            // Implementaciones del patrÃ³n Repository
â”‚   â”œâ”€â”€ Migrations              // Migraciones de Entity Framework
â”‚   â””â”€â”€ Security                // Implementaciones de seguridad (JWT, CORS, etc.)
â”‚
â”œâ”€â”€ MyApp.Tests                 // Capa de pruebas
â”‚   â”œâ”€â”€ UnitTests
â”‚   â””â”€â”€ IntegrationTests
â””â”€â”€
```

## CaracterÃ­sticas
- **Arquitectura Hexagonal**: Separa la lÃ³gica de negocio de las preocupaciones de infraestructura, facilitando el mantenimiento y la evoluciÃ³n del cÃ³digo.
- **InyecciÃ³n de Dependencias**: Utiliza DI para gestionar las dependencias entre componentes.
- **Swagger**: Incluye documentaciÃ³n de API generada automÃ¡ticamente para facilitar las pruebas y la exploraciÃ³n de endpoints.
- **ValidaciÃ³n de Datos**: Incluye un esquema bÃ¡sico para la validaciÃ³n de datos utilizando validadores.
- **Control de Acceso**: Implementa autenticaciÃ³n y autorizaciÃ³n utilizando JWT.
- **Pruebas Unitarias**: Proporciona una base para escribir pruebas unitarias e integradas.

### ðŸ”§ **TecnologÃ­as Utilizadas:**
- .NET 6.0
- MySQL
- Swagger
- Moq
- Xunit
- AutoMapper
- EntityFramework
- FluentValidation

## Requisitos

- [.NET 6.0 o superior](https://dotnet.microsoft.com/download/dotnet)
- [MySQL](https://www.mysql.com/) (u otra base de datos, segÃºn la configuraciÃ³n)

## InstalaciÃ³n
1. Clona el repositorio:

    ```bash
        git clone https://github.com/hawkinsdev/arquitectura_hexagonal_net
    ```
2. Restaura los paquetes NuGet:
    ```bash
        dotnet restore
    ```
3. Configura la cadena de conexiÃ³n en appsettings.json para tu base de datos.

4. Inicia la aplicaciÃ³n:
    ```bash
        dotnet run --project MyApp.Api
    ```
    si quieres usar el hot reload agrega watch despuÃ©s de dotnet para tener actualizaciones automÃ¡ticas mientras codificas.

5. Ejecutar las pruebas
    ```bash
        dotnet test
    ```

Contribuciones
Las contribuciones son bienvenidas. SiÃ©ntete libre de hacer un fork del repositorio y enviar un pull request.